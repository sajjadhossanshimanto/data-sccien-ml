🎯 𝗧𝗼𝗱𝗮𝘆'𝘀 𝗟𝗲𝘀𝘀𝗼𝗻 : 𝗢𝘃𝗲𝗿𝘃𝗶𝗲𝘄 𝗼𝗳 𝗣𝗮𝗻𝗱𝗮𝘀 𝗜𝗻𝗱𝗲𝘅𝗶𝗻𝗴 𝗮𝗻𝗱 𝗦𝗲𝗹𝗲𝗰𝘁𝗶𝗼𝗻

Todays lecssion wat a bit insence competing to other days, although everything is at basic level. For practising today's lecssion we start by creating a datagram with random data of (5x5) and assigned alphabetical row and column label.

🔹𝗖𝗼𝗹𝘂𝗺𝗻 𝗦𝗲𝗹𝗲𝗰𝘁𝗶𝗼𝗻:
● By use 𝘀𝗾𝘂𝗮𝗿𝗲 𝗯𝗿𝗮𝗰𝗸𝗲𝘁𝘀 [] we are allowed to access columns by name.
● 𝗱𝗳[['𝗪','𝗭']] -> we can also pass multiple columns.

🔹𝗥𝗼𝘄 𝗦𝗲𝗹𝗲𝗰𝘁𝗶𝗼𝗻:
 [] can't be used to access data on rows directly. Rather pandas provides us with .loc and .iloc attribute:
● .𝗹𝗼𝗰['A'] -> for label-based indexing.
● .𝗶𝗹𝗼𝗰[2] -> for integer-based indexing.
◌ Both can also take column names as the second argument, giving powerful selection capabilities.

🔹𝗖𝗼𝗻𝗱𝗶𝘁𝗶𝗼𝗻𝗮𝗹 𝗦𝗲𝗹𝗲𝗰𝘁𝗶𝗼𝗻:
● We can use the same 𝘀𝗾𝘂𝗮𝗿𝗲 𝗯𝗿𝗮𝗰𝗸𝗲𝘁𝘀 [] to filter rows based on conditions. df[df['A'] > 0] 
◌ 𝗱𝗳['𝗔'] > 𝟬 -> comparing a datafram with any condition returns a true false
◌ 𝗱𝗳[𝗱𝗳['𝗔'] > 𝟬] -> which can be used for bit masking.

🔹𝗠𝘂𝗹𝘁𝗶𝗽𝗹𝗲 𝗖𝗼𝗻𝗱𝗶𝘁𝗶𝗼𝗻𝘀:
● Combine conditions using logical operators (&, |, ~).
◌ df[(df['A'] > 0) & (df['B'] < 1)] selects rows where A is greater than 0 and B is less than 1.

🔹𝗥𝗼𝘄 𝗮𝗻𝗱 𝗖𝗼𝗹𝘂𝗺𝗻 𝗗𝗲𝗹𝗲𝘁𝗶𝗼𝗻:
● Use .drop() to remove rows or columns.
◌  df.drop("W") -> removes columns.
◌  df.drop("A", axis=1) -> removes rows.